package cn.machine.geek;

/**
 * 位1的个数
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 *
 *
 *
 * 提示：
 *
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 *
 *
 * 示例 1：
 *
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 *
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 *
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *
 *
 * 提示：
 *
 * 输入必须是长度为 32 的 二进制串 。
 *
 *
 * 进阶：
 *
 * 如果多次调用这个函数，你将如何优化你的算法？
 */
public class 位1的个数 {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        String s = Integer.toBinaryString(n);
        int total = 0;
        for (int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '1'){
                total++;
            }
        }
        return total;
    }
    /**
     * 方法一：循环检查二进制位
     * 思路及解法
     *
     * 我们可以直接循环检查给定整数 nn 的二进制位的每一位是否为 11。
     *
     * 具体代码中，当检查第 ii 位时，我们可以让 nn 与 2^i2
     * i
     *   进行与运算，当且仅当 nn 的第 ii 位为 11 时，运算结果不为 00。
     *
     * 代码
     *
     * C++JavaPython3GolangJavaScriptC
     *
     * public class Solution {
     *     public int hammingWeight(int n) {
     *         int ret = 0;
     *         for (int i = 0; i < 32; i++) {
     *             if ((n & (1 << i)) != 0) {
     *                 ret++;
     *             }
     *         }
     *         return ret;
     *     }
     * }
     * 复杂度分析
     *
     * 时间复杂度：O(k)O(k)，其中 kk 是 \texttt{int}int 型的二进制位数，k=32k=32。我们需要检查 nn 的二进制位的每一位，一共需要检查 3232 位。
     *
     * 空间复杂度：O(1)O(1)，我们只需要常数的空间保存若干变量。
     *
     * 方法二：位运算优化
     * 思路及解法
     *
     * 观察这个运算：n~\&~(n - 1)n & (n−1)，其预算结果恰为把 nn 的二进制位中的最低位的 11 变为 00 之后的结果。
     *
     * 如：6~\&~(6-1) = 4, 6 = (110)_2, 4 = (100)_26 & (6−1)=4,6=(110)
     * 2
     * ​
     *  ,4=(100)
     * 2
     * ​
     *  ，运算结果 44 即为把 66 的二进制位中的最低位的 11 变为 00 之后的结果。
     *
     * 这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的 nn 与 n - 1n−1 做与运算，直到 nn 变为 00 即可。因为每次运算会使得 nn 的最低位的 11 被翻转，因此运算次数就等于 nn 的二进制位中 11 的个数。
     *
     * 代码
     *
     * C++JavaPython3GolangJavaScriptC
     *
     * public class Solution {
     *     public int hammingWeight(int n) {
     *         int ret = 0;
     *         while (n != 0) {
     *             n &= n - 1;
     *             ret++;
     *         }
     *         return ret;
     *     }
     * }
     * 复杂度分析
     *
     * 时间复杂度：O(\log n)O(logn)。循环次数等于 nn 的二进制位中 11 的个数，最坏情况下 nn 的二进制位全部为 11。我们需要循环 \log nlogn 次。
     *
     * 空间复杂度：O(1)O(1)，我们只需要常数的空间保存若干变量。
     *
     * 作者：LeetCode-Solution
     * 链接：https://leetcode-cn.com/problems/number-of-1-bits/solution/wei-1de-ge-shu-by-leetcode-solution-jnwf/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     */
}
